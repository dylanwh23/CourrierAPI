<?php
namespace App\Http\Controllers\Api;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use App\Models\Ticket;
use App\Models\Orden;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class ChatbotController extends Controller
{
    public function procesarMensaje(Request $request)
    {
        $mensaje = $request->input('mensaje');
        $user = Auth::user();

        try {
            $response = Http::withHeaders([
                'Authorization' => 'Bearer ' . config('services.openrouter.key'),
                'HTTP-Referer' => 'https://tusitio.com',
                'X-Title' => 'TuAppSoporte'
            ])->post('https://openrouter.ai/api/v1/chat/completions', [
                'model' => 'deepseek/deepseek-chat:free',
                'messages' => [
                   [
                        'role' => 'system',
                        'content' =>
                            "Eres un asistente conversacional amable, c√°lido y claro, especializado en soporte al cliente para un servicio de env√≠os desde China a Uruguay. Respondes de forma cercana y √∫til, incluso si el usuario escribe mal, con errores tipogr√°ficos o frases confusas. Puedes inferir la intenci√≥n general del mensaje aunque est√© mal escrito.

" .
                            "Tu objetivo es ayudar al usuario con consultas sobre:
" .
                            "- Tickets de soporte (crear, listar, consultar estado)
" .
                            "- √ìrdenes de compra (seguimiento, estado, tracking)
" .
                            "- Pol√≠ticas de env√≠os
" .
                            "- Informaci√≥n general sobre el servicio

" .
                            "üì¶ Tarifas y planes:
" .
                            "Env√≠os peque√±os:
" .
                            "- Servicio est√°ndar desde China
" .
                            "- Seguro de env√≠o y seguimiento
" .
                            "- 1 a 3 kg: USD 19.80

" .
                            "Env√≠os regulares:
" .
                            "- Servicio express
" .
                            "- Embalaje especial y despacho aduanal
" .
                            "- 0.9‚Äì5 kg: USD 21.90, 5‚Äì20 kg: USD 16.50, 20‚Äì40 kg: USD 13.20, 40+ kg: Cotizar

" .
                            "Env√≠os extra:
" .
                            "- Atenci√≥n personalizada y 24/7
" .
                            "- Descuentos por volumen
" .
                            "- 0‚Äì10 kg: USD 25.00, 10‚Äì30 kg: USD 20.00, 30+ kg: Cotizar

" .
                            "Comparativa:
" .
                            "- Todos incluyen seguro y seguimiento
" .
                            "- Solo Regular y Extra incluyen express
" .
                            "- Solo Extra incluye atenci√≥n 24/7 y descuentos por volumen

" .
                            "üîß Sobre lo que puedes hacer:
" .
                            "- Si el usuario te saluda o habla informalmente (‚Äúhola‚Äù, ‚Äúc√≥mo est√°s‚Äù, ‚Äútodo bien‚Äù), respond√© como una IA conversacional c√°lida (no respondas en JSON en ese caso).
" .
                            "- En todos los dem√°s casos, antes de enviar la acci√≥n JSON, escribe una breve respuesta amigable que se mostrar√° al usuario.
" .
                            "- Luego env√≠a SOLO un JSON con la estructura:
" .
                            "  {\"action\":\"nombre_accion\", \"params\":{}, \"respuesta\":\"(tu mensaje amigable)\"}
" .
                            "- No combines varias acciones ni respuestas en una sola respuesta.
" .
                            "- Ejemplo:
" .
                            "  \"Claro, aqu√≠ est√°n tus tickets recientes:\n{\"action\":\"listar_tickets\", \"params\":{}, \"respuesta\":\"Aqu√≠ est√°n tus tickets m√°s recientes üì©\"}\"

" .
                            "‚ö†Ô∏è IMPORTANTE:
" .
                            "- No inventes respuestas.
" .
                            "- Si no entend√©s o no ten√©s informaci√≥n concreta, respond√© con la acci√≥n \"crear_ticket\" y un mensaje amigable.
" .
                            "- Solo devolv√© texto sin JSON para saludos e interacciones casuales.
" .
                            "- Para cualquier otra consulta, respond√© con el mensaje amigable seguido del JSON estructurado.

" .
                            "üß™ Ejemplos:
" .
                            "Usuario: Quiero ver mis tickets
" .
                            "Respuesta: Claro, aqu√≠ est√°n tus tickets recientes:
" .
                            "{\"action\":\"listar_tickets\", \"params\":{}, \"respuesta\":\"Aqu√≠ est√°n tus tickets m√°s recientes üì©\"}

" .
                            "Usuario: ¬øCu√°ndo llegar√° mi pedido?
" .
                            "Respuesta: Lo siento, no tengo esa informaci√≥n exacta. Por favor crea un ticket desde http://localhost:4200/soportechat y te ayudamos enseguida üí¨
" .
                            "{\"action\":\"crear_ticket\", \"params\":{}, \"respuesta\":\"No tengo esa informaci√≥n exacta. Por favor crea un ticket desde http://localhost:4200/soportechat y te ayudamos enseguida üí¨\"}

" .
                            "Usuario: Hola, ¬øc√≥mo est√°s?
" .
                            "Respuesta: ¬°Hola! üòä Estoy muy bien, gracias por preguntar. ¬øEn qu√© puedo ayudarte hoy con tu env√≠o desde China a Uruguay?
"
                    ],
                    [
                        'role' => 'user',
                        'content' => $mensaje
                    ]
                ]
            ]);

            if (!$response->successful()) {
                $errorContent = $response->body();
                Log::error('Error en el servicio de IA: ' . $errorContent);
                return response()->json(['respuesta' => 'Error en el servicio de IA, intenta m√°s tarde.']);
            }

            $contenido = $response->json()['choices'][0]['message']['content'] ?? '';

            // Intentar extraer JSON si hay
             $contenido = $response->json()['choices'][0]['message']['content'] ?? '';
            $textoAntesDelJson = preg_split('/\{.*\}/s', $contenido)[0] ?? '';

            if (preg_match('/\{.*\}/s', $contenido, $matches)) {
                $jsonString = $matches[0];
                $json = json_decode($jsonString, true);

                if ($json && isset($json['action'])) {
                    $action = $json['action'];
                    $params = $json['params'] ?? [];
                    $respuestaIA = $json['respuesta'] ?? null;

                    $mensajeFinal = trim($textoAntesDelJson) . "\n\n" . $respuestaIA;

                    switch ($action) {
                        case 'listar_tickets':
                            if (!$user) {
                                return response()->json(['respuesta' => 'Para ver tus tickets necesitas iniciar sesi√≥n.']);
                            }
                            $tickets = Ticket::where('user_id', $user->id)
                                ->orderBy('created_at', 'desc')
                                ->take(5)
                                ->get();

                            if ($tickets->isEmpty()) {
                                return response()->json(['respuesta' => 'No tienes tickets abiertos actualmente.']);
                            }

                            $respuesta = "Tus tickets:\n";
                            foreach ($tickets as $ticket) {
                                $respuesta .= "- Ticket #{$ticket->id}: {$ticket->asunto} (Estado: {$ticket->estado})\n";
                            }
                            return response()->json(['respuesta' => $respuesta]);

                        case 'crear_ticket':
                            return response()->json(['respuesta' => $mensajeFinal]);

                        case 'listar_ordenes':
                            if (!$user) {
                                return response()->json(['respuesta' => 'Para ver tus √≥rdenes necesitas iniciar sesi√≥n.']);
                            }
                            $ordenes = Orden::where('user_id', $user->id)
                                ->orderBy('created_at', 'desc')
                                ->take(5)
                                ->get();

                            if ($ordenes->isEmpty()) {
                                return response()->json(['respuesta' => 'No tienes √≥rdenes registradas actualmente.']);
                            }

                            $respuesta = "Tus √≥rdenes:\n";
                            foreach ($ordenes as $orden) {
                                $respuesta .= "- Orden #{$orden->id} (Tracking: {$orden->tracking_id}) - Estado: {$orden->status}\n";
                            }
                            return response()->json(['respuesta' => $respuesta]);

                        default:
                            return response()->json(['respuesta' => $mensajeFinal]);
                    }
                }
            }

            return response()->json(['respuesta' => $contenido]);

        }catch (\Exception $e) {
            Log::error('Error chatbot: ' . $e->getMessage());
            return response()->json(['respuesta' => 'Error t√©cnico, intenta luego.']);
        }
    }
}
